rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isUserIdInArray(docId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/anonymousUserLinks/$(docId)) &&
             request.auth.uid in get(/databases/$(database)/documents/anonymousUserLinks/$(docId)).data.linksTo;
    }

    function isAnonymousUser() {
      return isSignedIn() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isNormalUser() {
      return isSignedIn() && !isAnonymousUser();
    }


    match /anonymousUserLinks/{deviceId} {
      allow delete, list: if false;
      allow get: if
        isSignedIn() &&
        resource.data.linksTo.hasAll([request.auth.uid]);
      allow create: if
        request.auth != null &&
        request.resource.data.keys().size() == 1 &&
        request.resource.data.keys().hasOnly(['linksTo']) &&
        request.resource.data.linksTo is list &&
        request.resource.data.linksTo.size() == 1;

      allow update: if
        isAnonymousUser() &&
        request.resource.data.linksTo.size() == resource.data.linksTo.size() + 1 &&
        request.resource.data.linksTo.hasAll(resource.data.linksTo) &&
        !resource.data.linksTo.hasAll(request.resource.data.linksTo)
      ;
    }

    match /triesAvailable/{deviceOrUserId} {
      allow get: if
        (isSignedIn() && isUserIdInArray(deviceOrUserId)) ||
        isNormalUser();
    }
  }
}