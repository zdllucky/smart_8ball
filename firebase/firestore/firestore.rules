rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isUserIdInArray(docId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/anonymousUserLinks/$(docId)/linksTo/$(request.auth.uid));
    }

    function isAnonymousUser() {
      return isSignedIn() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isNormalUser() {
      return isSignedIn() && !isAnonymousUser();
    }



    match /anonymousUserLinks/{deviceId} {
      allow create: if
        isSignedIn() &&
        request.resource.data.keys().hasOnly(['linksTo']) &&
        request.resource.data.linksTo is map &&
        request.resource.data.linksTo.keys().size() == 0;

      allow get: if isSignedIn();



      match /linksTo/{userId} {
        allow create: if
          isSignedIn() &&
          userId == request.auth.uid &&
          request.resource.data.keys().hasOnly(['linkedAt']);

        allow get: if
          isSignedIn() &&
          userId == request.auth.uid;

      }
    }

    match /triesAvailable/{deviceOrUserId} {
      allow get: if
        (isSignedIn() && isUserIdInArray(deviceOrUserId)) ||
        isNormalUser();
    }
  }
}